name: IaC-003-Resources-Apply

trigger:
  branches:
    include:
      - develop
  paths:
    include:
      - "infra/tables/**"
      - "infra/terraform/resources/**"

pr:
  branches:
    include:
      - develop
  paths:
    include:
      - "infra/tables/**"
      - "infra/terraform/resources/**"

parameters:
  - name: environment
    type: string
    default: Development
    values:
      - Development
      - Production
  - name: customSuffix
    type: string
    default: 'default'
    displayName: 'Custom resource suffix (leave as default to use environment-based suffix)'

variables:
  - name: environment
    value: ${{ parameters.environment }}
  
  - name: environmentSuffix
    ${{ if ne(parameters.customSuffix, 'default') }}:
      value: ${{ parameters.customSuffix }}
    ${{ else }}:
      ${{ if eq(parameters.environment, 'Production') }}:
        value: 'pro'
      ${{ else }}:
        value: 'dev'
  
  - group: Berge

stages:
  - stage: ResourcesPlan
    displayName: '📐 Plan Resources'
    jobs:
      - job: TerraformPlan
        displayName: 'Generate Terraform Plan'
        pool:
          vmImage: ubuntu-latest
        timeoutInMinutes: 30
        steps:
          - script: |
              echo "Environment: $(environment)"
              echo "Resource suffix: $(environmentSuffix)"
            displayName: '📋 Deployment Configuration'

          - task: AzureCLI@2
            displayName: '🔑 Azure Login'
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION_NAME)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az account show

          - checkout: self

          - task: TerraformInstaller@1
            displayName: '⚙️ Setup Terraform $(TF_VERSION)'
            inputs:
              terraformVersion: '$(TF_VERSION)'

          - task: TerraformCLI@1
            displayName: '🔄 Terraform Init'
            inputs:
              command: 'init'
              workingDirectory: '$(TF_WORKING_DIR_RESOURCES)'
              backendType: 'azurerm'
              backendServiceArm: '$(AZURE_SERVICE_CONNECTION_NAME)'
              ensureBackend: false
              commandOptions: >
                -upgrade
                -reconfigure
              backendAzureRmResourceGroupName: '$(TF_BACKEND_RESOURCE_GROUP_NAME)'
              backendAzureRmStorageAccountName: '$(TF_BACKEND_STORAGE_ACCOUNT_NAME)'
              backendAzureRmContainerName: '$(TF_BACKEND_CONTAINER_NAME)'
              backendAzureRmKey: '$(environmentSuffix).terraform.tfstate'

          - task: Bash@3
            displayName: 'Create Terraform Variables File'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(TF_WORKING_DIR_RESOURCES)'
              script: |
                cat > terraform.tfvars <<EOF
                subscription_id = "$(AZURE_SUBSCRIPTION_ID)"
                use_random_suffix = false
                suffix = "$(environmentSuffix)"
                environment = "$(environment)"
                resource_group_name = "$(AZ_RG_NAME)"
                acr_name = "$(AZ_ACR_NAME)"                
                app_insights_name = "$(AZ_APP_INSIGHTS_NAME)"
                ace_name = "$(AZ_ACE_NAME)"
                appcs_name = "$(AZ_APPCS_NAME)"
                cosmos_name = "$(AZ_COSMOS_NAME)"
                kv_name = "$(AZ_KV_NAME)"
                log_analytics_workspace_name = "$(AZ_LOG_ANALYTICS_WORKSPACE_NAME)"
                managed_identity_name = "$(AZ_MANAGE_IDENTITY_NAME)"  
                storage_account_name = "$(AZ_STORAGE_ACCOUNT_NAME)"
                aca_ai_agent_proccessor_name = "$(AZ_ACA_AI_AGENT_PROCCESSOR_NAME)" 
                cosmos_location = "$(AZ_COSMOS_LOCATION)" 
                conf__blob_container_name = "$(AZ_BLOB_CONTAINER_NAME)"
                EOF
                
                echo "Created terraform.tfvars with the following content:"
                cat terraform.tfvars

          - task: TerraformCLI@1
            displayName: '📝 Terraform Plan'
            inputs:
              command: 'plan'
              workingDirectory: '$(TF_WORKING_DIR_RESOURCES)'
              environmentServiceName: '$(AZURE_SERVICE_CONNECTION_NAME)'
              publishPlanResults: 'tfplan'
              commandOptions: >
                -var-file=terraform.tfvars
                -detailed-exitcode
                -out=$(Build.ArtifactStagingDirectory)/tfplan

          - task: PublishPipelineArtifact@1
            displayName: '📦 Publish Terraform Plan'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/tfplan'
              artifact: 'tfplan'
              publishLocation: 'pipeline'
          
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Terraform Variables'
            inputs:
              targetPath: '$(TF_WORKING_DIR_RESOURCES)/terraform.tfvars'
              artifact: 'terraform-vars'
              publishLocation: 'pipeline'

  - stage: ResourcesApply
    displayName: '☁️ Apply Resources'
    dependsOn: ResourcesPlan
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: TerraformApply
        displayName: 'Apply Terraform Plan'
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: AzureCLI@2
            displayName: '🔑 Azure Login'
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION_NAME)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az account show

          - checkout: self

          - task: DownloadPipelineArtifact@2
            displayName: '📥 Download Terraform Plan'
            inputs:
              artifactName: 'tfplan'
              targetPath: '$(Build.ArtifactStagingDirectory)'
          
          - task: DownloadPipelineArtifact@2
            displayName: '📥 Download Terraform Variables'
            inputs:
              artifactName: 'terraform-vars'
              targetPath: '$(TF_WORKING_DIR_RESOURCES)'

          - task: TerraformInstaller@1
            displayName: '⚙️ Setup Terraform $(TF_VERSION)'
            inputs:
              terraformVersion: '$(TF_VERSION)'

          - task: TerraformCLI@1
            displayName: '🔄 Terraform Init'
            inputs:
              command: 'init'
              workingDirectory: '$(TF_WORKING_DIR_RESOURCES)'
              backendType: 'azurerm'
              backendServiceArm: '$(AZURE_SERVICE_CONNECTION_NAME)'
              ensureBackend: false
              commandOptions: >
                -upgrade
                -reconfigure
              backendAzureRmResourceGroupName: '$(TF_BACKEND_RESOURCE_GROUP_NAME)'
              backendAzureRmStorageAccountName: '$(TF_BACKEND_STORAGE_ACCOUNT_NAME)'
              backendAzureRmContainerName: '$(TF_BACKEND_CONTAINER_NAME)'
              backendAzureRmKey: '$(environmentSuffix).terraform.tfstate'

          - task: TerraformCLI@1
            displayName: '🚀 Terraform Apply'
            inputs:
              command: 'apply'
              workingDirectory: '$(TF_WORKING_DIR_RESOURCES)'
              environmentServiceName: '$(AZURE_SERVICE_CONNECTION_NAME)'
              commandOptions: '-auto-approve $(Build.ArtifactStagingDirectory)/tfplan'
